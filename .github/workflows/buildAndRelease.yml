name: Build and Release
on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag name'
        required: true
        default: 'latest'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
    
    - name: Determine Release Tag
      id: determine-tag
      run: |
        if [ '${{ github.event_name }}' == 'release' ]; then
          echo "RELEASE_TAG=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
          echo "RELEASE_ID=${{ github.event.release.id }}" >> $GITHUB_ENV
        else
          echo "RELEASE_TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          # For manual workflow, we need to get or create the release
          tag=${{ github.event.inputs.tag || 'latest' }}
          release_id=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$tag" | \
            jq -r '.id')
          if [ "$release_id" != "null" ]; then
            echo "RELEASE_ID=$release_id" >> $GITHUB_ENV
          else
            echo "Creating new release for tag $tag"
            release_response=$(curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "{\"tag_name\":\"$tag\",\"name\":\"Release $tag\",\"body\":\"Release created by GitHub Actions. Tag $tag\",\"draft\":false,\"prerelease\":false}" \
              "https://api.github.com/repos/${{ github.repository }}/releases")
            new_release_id=$(echo "$release_response" | jq -r '.id')
            echo "RELEASE_ID=$new_release_id" >> $GITHUB_ENV
          fi
        fi
    
    - name: Build and package for multiple platforms
      run: |
        # Define the platforms and their configurations
        # Format: "GOOS/GOARCH/GOARM" (GOARM is optional)
        platforms=(
          "windows/amd64" 
          "linux/amd64" 
          "linux/arm64" 
          "linux/arm/7"  # ARMv7 with GOARM=7
          "linux/386" 
          "darwin/amd64"
          "darwin/arm64"
        )
        
        # Navigate to the gmqttd directory
        cd cmd/gmqttd || { echo "Failed to enter gmqttd directory"; exit 1; }
        
        # Replace IP addresses in the necessary files if needed
        if [ -f "thingspanel.yml" ]; then
          # Use sed to replace 47.115.213.71 with 127.0.0.1
          sed -i 's/47.115.213.71/127.0.0.1/g' thingspanel.yml
        fi
        
        # Create dist directory for builds
        mkdir -p ../../dist
        
        for platform in "${platforms[@]}"; do
          # Split the platform string
          IFS="/" read -r os arch arm_version <<< "$platform"
          
          # Set build environment variables
          export GOOS=$os
          export GOARCH=$arch
          export CGO_ENABLED=0
          
          # Set GOARM if specified
          if [ ! -z "$arm_version" ]; then
            export GOARM=$arm_version
            platform_suffix="$os-$arch-v$arm_version"
          else
            unset GOARM
            platform_suffix="$os-$arch"
          fi
          
          echo "Building for $GOOS/$GOARCH${GOARM:+/v$GOARM}..."
          
          # Create output directory
          mkdir -p "../../dist/$platform_suffix"
          
          # Copy necessary files
          cp -r certs "../../dist/$platform_suffix/" 2>/dev/null || echo "No certs directory found"
          cp thingspanel.yml "../../dist/$platform_suffix/" 2>/dev/null || echo "No thingspanel.yml found"
          cp default_config.yml "../../dist/$platform_suffix/" 2>/dev/null || echo "No default_config.yml found"
          
          # Adjust output file name for Windows
          if [ "$os" == "windows" ]; then
             output_file="../../dist/$platform_suffix/thingspanel-gmqtt.exe"
          else
             output_file="../../dist/$platform_suffix/thingspanel-gmqtt"
          fi
          
          # Build for each platform
          go build -o "$output_file"
          
          # Check if build was successful
          if [ $? -ne 0 ]; then
            echo "Failed to build for $GOOS/$GOARCH${GOARM:+/v$GOARM}, skipping..."
            rm -rf "../../dist/$platform_suffix"
            continue
          fi
          
          # Create archive name (all platforms use zip)
          archive_name="thingspanel-gmqtt-$platform_suffix.zip"
          # Package into zip for all platforms
          (cd ../../dist && zip -r "../../$archive_name" "$platform_suffix")
          
          echo "Created archive: $archive_name"
        done
        
        # Navigate back to root directory
        cd ../..
        
        # List all created archives
        ls -la *.zip 2>/dev/null || echo "No archives created"
    
    - name: Upload Release Assets
      id: upload-release-assets
      run: |
        for asset in ./thingspanel-gmqtt-*.zip; do
          if [ -f "$asset" ]; then
            asset_name=$(basename "$asset")
            echo "Uploading $asset_name..."
            
            content_type="application/zip"
            
            curl -XPOST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: $content_type" \
              --data-binary "@$asset" \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ env.RELEASE_ID }}/assets?name=$asset_name"
          fi
        done
